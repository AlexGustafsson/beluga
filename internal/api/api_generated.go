// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220906181851-9c600dddea33 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gorilla/mux"
)

// Defines values for CreateRepositoryRequestPrivacy.
const (
	CreateRepositoryRequestPrivacyPrivate CreateRepositoryRequestPrivacy = "private"
	CreateRepositoryRequestPrivacyPublic  CreateRepositoryRequestPrivacy = "public"
)

// Defines values for RepositoryRepositoryType.
const (
	RepositoryRepositoryTypeImage RepositoryRepositoryType = "image"
)

// Defines values for RepositoryUpdatePrivacy.
const (
	RepositoryUpdatePrivacyPrivate RepositoryUpdatePrivacy = "private"
	RepositoryUpdatePrivacyPublic  RepositoryUpdatePrivacy = "public"
)

// Defines values for SummaryType.
const (
	SummaryTypeImage SummaryType = "image"
)

// Defines values for GetOrganizationsParamsOrdering.
const (
	GetOrganizationsParamsOrderingLastUpdated      GetOrganizationsParamsOrdering = "last_updated"
	GetOrganizationsParamsOrderingMinusLastUpdated GetOrganizationsParamsOrdering = "-last_updated"
	GetOrganizationsParamsOrderingMinusName        GetOrganizationsParamsOrdering = "-name"
	GetOrganizationsParamsOrderingName             GetOrganizationsParamsOrdering = "name"
)

// Defines values for GetRepositoriesParamsOrdering.
const (
	GetRepositoriesParamsOrderingLastUpdated      GetRepositoriesParamsOrdering = "last_updated"
	GetRepositoriesParamsOrderingMinusLastUpdated GetRepositoriesParamsOrdering = "-last_updated"
	GetRepositoriesParamsOrderingMinusName        GetRepositoriesParamsOrdering = "-name"
	GetRepositoriesParamsOrderingName             GetRepositoriesParamsOrdering = "name"
)

// Defines values for GetTagsParamsOrdering.
const (
	GetTagsParamsOrderingLastUpdated      GetTagsParamsOrdering = "last_updated"
	GetTagsParamsOrderingMinusLastUpdated GetTagsParamsOrdering = "-last_updated"
	GetTagsParamsOrderingMinusName        GetTagsParamsOrdering = "-name"
	GetTagsParamsOrderingName             GetTagsParamsOrdering = "name"
)

// Defines values for GetUserContributedParamsOrdering.
const (
	GetUserContributedParamsOrderingLastUpdated      GetUserContributedParamsOrdering = "last_updated"
	GetUserContributedParamsOrderingMinusLastUpdated GetUserContributedParamsOrdering = "-last_updated"
	GetUserContributedParamsOrderingMinusName        GetUserContributedParamsOrdering = "-name"
	GetUserContributedParamsOrderingName             GetUserContributedParamsOrdering = "name"
)

// Defines values for GetUserStarredParamsOrdering.
const (
	GetUserStarredParamsOrderingLastUpdated      GetUserStarredParamsOrdering = "last_updated"
	GetUserStarredParamsOrderingMinusLastUpdated GetUserStarredParamsOrdering = "-last_updated"
	GetUserStarredParamsOrderingMinusName        GetUserStarredParamsOrdering = "-name"
	GetUserStarredParamsOrderingName             GetUserStarredParamsOrdering = "name"
)

// CreateRepositoryRequest defines model for CreateRepositoryRequest.
type CreateRepositoryRequest struct {
	Description string                         `json:"description"`
	Image       string                         `json:"image"`
	IsPrivate   bool                           `json:"is_private"`
	Name        string                         `json:"name"`
	Namespace   string                         `json:"namespace"`
	Privacy     CreateRepositoryRequestPrivacy `json:"privacy"`
	Registry    string                         `json:"registry"`
}

// CreateRepositoryRequestPrivacy defines model for CreateRepositoryRequest.Privacy.
type CreateRepositoryRequestPrivacy string

// Dockerfile defines model for Dockerfile.
type Dockerfile struct {
	Contents *string `json:"contents,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Errinfo map[string]interface{} `json:"errinfo"`
	Message string                 `json:"message"`
	Status  int                    `json:"status"`
}

// Image defines model for Image.
type Image struct {
	Architecture string    `json:"architecture"`
	Digest       string    `json:"digest"`
	Features     *string   `json:"features"`
	LastPulled   time.Time `json:"last_pulled"`
	LastPushed   time.Time `json:"last_pushed"`
	Os           string    `json:"os"`
	OsFeatures   string    `json:"os_features"`
	OsVersion    *string   `json:"os_version"`
	Size         int64     `json:"size"`
	Status       string    `json:"status"`
	Variant      *string   `json:"variant"`
}

// ImageWithDetails defines model for ImageWithDetails.
type ImageWithDetails struct {
	// Embedded struct due to allOf(#/components/schemas/Image)
	Image `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Layers []Layer `json:"layers"`
}

// Label defines model for Label.
type Label struct {
	Label string `json:"label"`
	Name  string `json:"name"`
}

// Layer defines model for Layer.
type Layer struct {
	Digest      *string `json:"digest,omitempty"`
	Instruction string  `json:"instruction"`
	Size        int64   `json:"size"`
}

// Logo defines model for Logo.
type Logo struct {
	Small   string `json:"small"`
	Small2x string `json:"small@2x"`
}

// Organization defines model for Organization.
type Organization struct {
	Badge         string    `json:"badge"`
	Company       string    `json:"company"`
	DateJoined    time.Time `json:"date_joined"`
	FullName      string    `json:"full_name"`
	GravatarEmail string    `json:"gravatar_email"`
	GravatarUrl   string    `json:"gravatar_url"`
	Id            string    `json:"id"`
	IsActive      bool      `json:"is_active"`
	Location      string    `json:"location"`
	Orgname       string    `json:"orgname"`
	ProfileUrl    string    `json:"profile_url"`
	Type          string    `json:"type"`
}

// OrganizationsPage defines model for OrganizationsPage.
type OrganizationsPage struct {
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []Organization `json:"results"`
}

// Page defines model for Page.
type Page struct {
	// Count Total results
	Count int `json:"count"`

	// Next URL to the next page
	Next *string `json:"next"`

	// Page Current page
	Page int `json:"page"`

	// PageSize Number of entries per page
	PageSize int `json:"page_size"`

	// Previous URL to the previous page
	Previous *string `json:"previous"`
}

// Publisher defines model for Publisher.
type Publisher struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Repository defines model for Repository.
type Repository struct {
	Affiliation    *string                   `json:"affiliation"`
	DateRegistered time.Time                 `json:"date_registered"`
	IsPrivate      bool                      `json:"is_private"`
	LastUpdated    time.Time                 `json:"last_updated"`
	MediaTypes     []string                  `json:"media_types"`
	Name           string                    `json:"name"`
	Namespace      string                    `json:"namespace"`
	PullCount      int                       `json:"pull_count"`
	RepositoryType *RepositoryRepositoryType `json:"repository_type"`
	StarCount      int                       `json:"star_count"`
	Status         int                       `json:"status"`
}

// RepositoryRepositoryType defines model for Repository.RepositoryType.
type RepositoryRepositoryType string

// RepositoryPage defines model for RepositoryPage.
type RepositoryPage struct {
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []Repository `json:"results"`
}

// RepositoryUpdate defines model for RepositoryUpdate.
type RepositoryUpdate struct {
	Description     *string                  `json:"description,omitempty"`
	FullDescription *string                  `json:"full_description,omitempty"`
	IsPrivate       *bool                    `json:"is_private,omitempty"`
	Privacy         *RepositoryUpdatePrivacy `json:"privacy,omitempty"`
}

// RepositoryUpdatePrivacy defines model for RepositoryUpdate.Privacy.
type RepositoryUpdatePrivacy string

// RepositoryWithDetails defines model for RepositoryWithDetails.
type RepositoryWithDetails struct {
	// Embedded struct due to allOf(#/components/schemas/Repository)
	Repository `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	CanEdit           bool   `json:"can_edit"`
	CollaboratorCount int    `json:"collaborator_count"`
	Description       string `json:"description"`
	FullDescription   string `json:"full_description"`
	HasStarred        bool   `json:"has_starred"`
	HubUser           string `json:"hub_user"`
	IsAutomated       bool   `json:"is_automated"`
	Permissions       struct {
		Admin bool `json:"admin"`
		Read  bool `json:"read"`
		Write bool `json:"write"`
	} `json:"permissions"`
	User string `json:"user"`
}

// Summary defines model for Summary.
type Summary struct {
	Architectures       []Label     `json:"architectures"`
	Categories          []Label     `json:"categories"`
	CertificationStatus string      `json:"certification_status"`
	CreatedAt           time.Time   `json:"created_at"`
	FilterType          string      `json:"filter_type"`
	Id                  string      `json:"id"`
	LogoUrl             Logo        `json:"logo_url"`
	Name                string      `json:"name"`
	OperatingSystems    []Label     `json:"operating_systems"`
	Popularity          int         `json:"popularity"`
	Publisher           Publisher   `json:"publisher"`
	PullCount           int         `json:"pull_count"`
	ShortDescription    string      `json:"short_description"`
	Slug                string      `json:"slug"`
	Source              string      `json:"source"`
	StarCount           int         `json:"star_count"`
	Type                SummaryType `json:"type"`
	UpdatedAt           time.Time   `json:"updated_at"`
}

// SummaryType defines model for Summary.Type.
type SummaryType string

// SummaryPage defines model for SummaryPage.
type SummaryPage struct {
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Summaries []Summary `json:"summaries"`
}

// Tag defines model for Tag.
type Tag struct {
	Creator             int       `json:"creator"`
	Digest              string    `json:"digest"`
	FullSize            int64     `json:"full_size"`
	Id                  int       `json:"id"`
	Images              []Image   `json:"images"`
	LastUpdated         time.Time `json:"last_updated"`
	LastUpdatedUsername string    `json:"last_updated_username"`
	LastUpdater         int       `json:"last_updater"`
	MediaType           string    `json:"media_type"`
	Name                string    `json:"name"`
	Repository          int       `json:"repository"`
	TagLastPulled       time.Time `json:"tag_last_pulled"`
	TagLastPushed       time.Time `json:"tag_last_pushed"`
	TagStatus           string    `json:"tag_status"`
	V2                  bool      `json:"v2"`
}

// TagPage defines model for TagPage.
type TagPage struct {
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []Tag `json:"results"`
}

// Token defines model for Token.
type Token struct {
	ClientId    string   `json:"client_id"`
	CreatedAt   string   `json:"created_at"`
	CreatorIp   *string  `json:"creator_ip,omitempty"`
	CreatorUa   string   `json:"creator_ua"`
	GeneratedBy string   `json:"generated_by"`
	IsActive    bool     `json:"is_active"`
	LastUsed    *string  `json:"last_used"`
	Scopes      []string `json:"scopes"`
	Token       *string  `json:"token,omitempty"`
	TokenLabel  string   `json:"token_label"`
	Uuid        string   `json:"uuid"`
}

// TokenPage defines model for TokenPage.
type TokenPage struct {
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ActiveCount float32 `json:"active_count"`
	Results     []Token `json:"results"`
}

// TokenRequest defines model for TokenRequest.
type TokenRequest struct {
	Scopes     []string `json:"scopes"`
	TokenLabel string   `json:"token_label"`
}

// User defines model for User.
type User struct {
	Company       string    `json:"company"`
	DateJoined    time.Time `json:"date_joined"`
	FullName      string    `json:"full_name"`
	GravatarEmail string    `json:"gravatar_email"`
	GravatarUrl   string    `json:"gravatar_url"`
	Id            string    `json:"id"`
	Location      string    `json:"location"`
	ProfileUrl    string    `json:"profile_url"`
	Type          string    `json:"type"`
	Username      string    `json:"username"`
	Uuid          string    `json:"uuid"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Company       string `json:"company"`
	FullName      string `json:"full_name"`
	GravatarEmail string `json:"gravatar_email"`
	Location      string `json:"location"`
	ProfileUrl    string `json:"profile_url"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	// PageSize Page size
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Type Type of responses
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// OperatingSystem Comma separated operating systems
	OperatingSystem *string `form:"operating_system,omitempty" json:"operating_system,omitempty"`

	// Architecture Comma separated image architectures
	Architecture *string `form:"architecture,omitempty" json:"architecture,omitempty"`

	// Q Free text query
	Query *string `form:"q,omitempty" json:"q,omitempty"`

	// Source Product source
	Source *string `form:"source,omitempty" json:"source,omitempty"`

	// Page Page integer
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Sort Sort option, such as updated_at and suggested
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	// PageSize Page size
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Page Page index
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Ordering Sort order
	Ordering *GetOrganizationsParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetOrganizationsParamsOrdering defines parameters for GetOrganizations.
type GetOrganizationsParamsOrdering string

// GetRepositoriesParams defines parameters for GetRepositories.
type GetRepositoriesParams struct {
	// PageSize Page size
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Page Page index
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Ordering Sort order
	Ordering *GetRepositoriesParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetRepositoriesParamsOrdering defines parameters for GetRepositories.
type GetRepositoriesParamsOrdering string

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	// Ordering Sort order
	Ordering *GetTagsParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Name Prefix of label names to match against
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetTagsParamsOrdering defines parameters for GetTags.
type GetTagsParamsOrdering string

// GetUserContributedParams defines parameters for GetUserContributed.
type GetUserContributedParams struct {
	// PageSize Page size
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Page Page index
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Ordering Sort order
	Ordering *GetUserContributedParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetUserContributedParamsOrdering defines parameters for GetUserContributed.
type GetUserContributedParamsOrdering string

// GetUserStarredParams defines parameters for GetUserStarred.
type GetUserStarredParams struct {
	// PageSize Page size
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Page Page index
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Ordering Sort order
	Ordering *GetUserStarredParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetUserStarredParamsOrdering defines parameters for GetUserStarred.
type GetUserStarredParamsOrdering string

// CreateAccessTokenJSONRequestBody defines body for CreateAccessToken for application/json ContentType.
type CreateAccessTokenJSONRequestBody = TokenRequest

// PostRepositoriesJSONRequestBody defines body for PostRepositories for application/json ContentType.
type PostRepositoriesJSONRequestBody = CreateRepositoryRequest

// PatchRepositoryJSONRequestBody defines body for PatchRepository for application/json ContentType.
type PatchRepositoryJSONRequestBody = RepositoryUpdate

// UpdateCurrentUserJSONRequestBody defines body for UpdateCurrentUser for application/json ContentType.
type UpdateCurrentUserJSONRequestBody = UserUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Perform a search
	// (GET /api/content/v1/products/search)
	GetSearch(w http.ResponseWriter, r *http.Request, params GetSearchParams) (*SummaryPage, *Error)
	// Get access tokens
	// (GET /v2/access-tokens)
	GetAccessTokens(w http.ResponseWriter, r *http.Request) (*TokenPage, *Error)
	// Create an access token
	// (POST /v2/access-tokens)
	CreateAccessToken(w http.ResponseWriter, r *http.Request) (*Token, *Error)
	// Fetch organizations
	// (GET /v2/orgs)
	GetOrganizations(w http.ResponseWriter, r *http.Request, params GetOrganizationsParams) (*OrganizationsPage, *Error)
	// Fetch organization
	// (GET /v2/orgs/{organization})
	GetOrganization(w http.ResponseWriter, r *http.Request, organization string) (*Organization, *Error)
	// Create a repository
	// (POST /v2/repositories)
	PostRepositories(w http.ResponseWriter, r *http.Request) (*Repository, *Error)
	// List repositories in a namespace
	// (GET /v2/repositories/{namespace})
	GetRepositories(w http.ResponseWriter, r *http.Request, namespace string, params GetRepositoriesParams) (*RepositoryPage, *Error)
	// List repositories in a namespace
	// (GET /v2/repositories/{namespace}/{repository})
	GetRepository(w http.ResponseWriter, r *http.Request, namespace string, repository string) (*RepositoryWithDetails, *Error)
	// Patch repository
	// (PATCH /v2/repositories/{namespace}/{repository})
	PatchRepository(w http.ResponseWriter, r *http.Request, namespace string, repository string) (*RepositoryWithDetails, *Error)
	// Fetch dockerfile
	// (GET /v2/repositories/{namespace}/{repository}/dockerfile)
	GetDockerfile(w http.ResponseWriter, r *http.Request, namespace string, repository string) (*Dockerfile, *Error)
	// List repositories in a namespace
	// (GET /v2/repositories/{namespace}/{repository}/tags)
	GetTags(w http.ResponseWriter, r *http.Request, namespace string, repository string, params GetTagsParams) (*TagPage, *Error)
	// Get a tag
	// (GET /v2/repositories/{namespace}/{repository}/tags/{tag})
	GetTag(w http.ResponseWriter, r *http.Request, namespace string, repository string, tag string) (*Tag, *Error)
	// List images in tag
	// (GET /v2/repositories/{namespace}/{repository}/tags/{tag}/images)
	GetImages(w http.ResponseWriter, r *http.Request, namespace string, repository string, tag string) ([]ImageWithDetails, *Error)
	// Fetch current user
	// (GET /v2/user)
	GetCurrentUser(w http.ResponseWriter, r *http.Request) (*User, *Error)
	// Update current user
	// (PUT /v2/user)
	UpdateCurrentUser(w http.ResponseWriter, r *http.Request) (*User, *Error)
	// Fetch user
	// (GET /v2/users/{user})
	GetUser(w http.ResponseWriter, r *http.Request, user string) (*User, *Error)
	// Fetch user contributed repositories
	// (GET /v2/users/{user}/repositories/contributed)
	GetUserContributed(w http.ResponseWriter, r *http.Request, user string, params GetUserContributedParams) (*RepositoryPage, *Error)
	// Fetch user starred repositories
	// (GET /v2/users/{user}/repositories/starred)
	GetUserStarred(w http.ResponseWriter, r *http.Request, user string, params GetUserStarredParams) (*RepositoryPage, *Error)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetSearch operation middleware
func (siw *ServerInterfaceWrapper) GetSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "operating_system" -------------

	err = runtime.BindQueryParameter("form", true, false, "operating_system", r.URL.Query(), &params.OperatingSystem)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "operating_system", Err: err})
		return
	}

	// ------------- Optional query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, false, "architecture", r.URL.Query(), &params.Architecture)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "architecture", Err: err})
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "source" -------------

	err = runtime.BindQueryParameter("form", true, false, "source", r.URL.Query(), &params.Source)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "source", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetSearch(w, r, params)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAccessTokens operation middleware
func (siw *ServerInterfaceWrapper) GetAccessTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetAccessTokens(w, r)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateAccessToken operation middleware
func (siw *ServerInterfaceWrapper) CreateAccessToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.CreateAccessToken(w, r)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetOrganizations operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", r.URL.Query(), &params.Ordering)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ordering", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetOrganizations(w, r, params)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetOrganization(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization" -------------
	var organization string

	err = runtime.BindStyledParameter("simple", false, "organization", mux.Vars(r)["organization"], &organization)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetOrganization(w, r, organization)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostRepositories operation middleware
func (siw *ServerInterfaceWrapper) PostRepositories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.PostRepositories(w, r)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRepositories operation middleware
func (siw *ServerInterfaceWrapper) GetRepositories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameter("simple", false, "namespace", mux.Vars(r)["namespace"], &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRepositoriesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", r.URL.Query(), &params.Ordering)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ordering", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetRepositories(w, r, namespace, params)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRepository operation middleware
func (siw *ServerInterfaceWrapper) GetRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameter("simple", false, "namespace", mux.Vars(r)["namespace"], &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", mux.Vars(r)["repository"], &repository)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetRepository(w, r, namespace, repository)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchRepository operation middleware
func (siw *ServerInterfaceWrapper) PatchRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameter("simple", false, "namespace", mux.Vars(r)["namespace"], &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", mux.Vars(r)["repository"], &repository)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.PatchRepository(w, r, namespace, repository)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetDockerfile operation middleware
func (siw *ServerInterfaceWrapper) GetDockerfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameter("simple", false, "namespace", mux.Vars(r)["namespace"], &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", mux.Vars(r)["repository"], &repository)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetDockerfile(w, r, namespace, repository)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameter("simple", false, "namespace", mux.Vars(r)["namespace"], &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", mux.Vars(r)["repository"], &repository)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", r.URL.Query(), &params.Ordering)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ordering", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetTags(w, r, namespace, repository, params)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTag operation middleware
func (siw *ServerInterfaceWrapper) GetTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameter("simple", false, "namespace", mux.Vars(r)["namespace"], &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", mux.Vars(r)["repository"], &repository)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	// ------------- Path parameter "tag" -------------
	var tag string

	err = runtime.BindStyledParameter("simple", false, "tag", mux.Vars(r)["tag"], &tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetTag(w, r, namespace, repository, tag)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetImages operation middleware
func (siw *ServerInterfaceWrapper) GetImages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameter("simple", false, "namespace", mux.Vars(r)["namespace"], &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", mux.Vars(r)["repository"], &repository)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	// ------------- Path parameter "tag" -------------
	var tag string

	err = runtime.BindStyledParameter("simple", false, "tag", mux.Vars(r)["tag"], &tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetImages(w, r, namespace, repository, tag)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetCurrentUser(w, r)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.UpdateCurrentUser(w, r)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", mux.Vars(r)["user"], &user)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetUser(w, r, user)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserContributed operation middleware
func (siw *ServerInterfaceWrapper) GetUserContributed(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", mux.Vars(r)["user"], &user)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserContributedParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", r.URL.Query(), &params.Ordering)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ordering", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetUserContributed(w, r, user, params)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserStarred operation middleware
func (siw *ServerInterfaceWrapper) GetUserStarred(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", mux.Vars(r)["user"], &user)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserStarredParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", r.URL.Query(), &params.Ordering)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ordering", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.GetUserStarred(w, r, user, params)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(err.Status)
			json.NewEncoder(w).Encode(err)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(res)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/content/v1/products/search", wrapper.GetSearch).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/access-tokens", wrapper.GetAccessTokens).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/access-tokens", wrapper.CreateAccessToken).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v2/orgs", wrapper.GetOrganizations).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/orgs/{organization}", wrapper.GetOrganization).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/repositories", wrapper.PostRepositories).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v2/repositories/{namespace}", wrapper.GetRepositories).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/repositories/{namespace}/{repository}", wrapper.GetRepository).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/repositories/{namespace}/{repository}", wrapper.PatchRepository).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/v2/repositories/{namespace}/{repository}/dockerfile", wrapper.GetDockerfile).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/repositories/{namespace}/{repository}/tags", wrapper.GetTags).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/repositories/{namespace}/{repository}/tags/{tag}", wrapper.GetTag).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/repositories/{namespace}/{repository}/tags/{tag}/images", wrapper.GetImages).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/user", wrapper.GetCurrentUser).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/user", wrapper.UpdateCurrentUser).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/v2/users/{user}", wrapper.GetUser).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/users/{user}/repositories/contributed", wrapper.GetUserContributed).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v2/users/{user}/repositories/starred", wrapper.GetUserStarred).Methods("GET")

	return r
}
